'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import styles from './styles.module.css';
import Header from '../../components/layout/Header';
import Footer from '../../components/layout/Footer';
import { FaCheckCircle, FaShieldAlt, FaArrowLeft } from 'react-icons/fa';
import { API_BASE_URL } from '@/lib/config';

interface BookingData {
  hoTen: string;
  soDienThoai: string;
  email: string;
  roomData: {
    maPhong: string;
    tenPhong: string;
    tenLoaiPhong: string;
    giaMoiDem: number;
    thumbnail: string;
  };
  ngayNhanPhong: string;
  ngayTraPhong: string;
  thoiGianDen: string;
  soNguoiLon: number;
  soTreEm: number;
  ghiChu: string;
  selectedServices?: any[];
  selectedPromotion?: any;
  priceBreakdown?: any;
}

interface PaymentData {
  phuongThucThanhToan: string;
  loaiThe: string;
  tenNganHang: string;
  ghiChuThanhToan: string;
}

export default function PaymentConfirmationPage() {
  const router = useRouter();
  const [bookingData, setBookingData] = useState<BookingData | null>(null);
  const [paymentData, setPaymentData] = useState<PaymentData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    // L·∫•y d·ªØ li·ªáu t·ª´ localStorage
    const bookingInfo = localStorage.getItem('guestBookingData');
    const paymentInfo = localStorage.getItem('guestPaymentData');

    if (bookingInfo && paymentInfo) {
      try {
        setBookingData(JSON.parse(bookingInfo));
        setPaymentData(JSON.parse(paymentInfo));
      } catch (error) {
        console.error('L·ªói khi parse d·ªØ li·ªáu:', error);
        router.push('/users/rooms');
      }
    } else {
      router.push('/users/rooms');
    }
    setIsLoading(false);
  }, [router]);

  const calculateNights = () => {
    if (!bookingData) return 0;
    const checkIn = new Date(bookingData.ngayNhanPhong);
    const checkOut = new Date(bookingData.ngayTraPhong);
    const diffTime = Math.abs(checkOut.getTime() - checkIn.getTime());
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  const calculateTotalPrice = () => {
    if (!bookingData) return 0;
    return bookingData.priceBreakdown?.total || (calculateNights() * (bookingData.roomData.giaMoiDem || 0));
  };

  const getPaymentMethodText = (method: string) => {
    switch (method) {
      case 'cash': return 'üíµ Thanh to√°n khi nh·∫≠n ph√≤ng';
      case 'card': return 'üí≥ Th·∫ª t√≠n d·ª•ng/Ghi n·ª£';
      case 'transfer': return 'üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng';
      case 'momo': return 'üì± V√≠ MoMo';
      case 'zalopay': return 'üíô ZaloPay';
      default: return 'üíµ Thanh to√°n khi nh·∫≠n ph√≤ng';
    }
  };

  const handleConfirmPayment = async () => {
    if (!bookingData || !paymentData) return;

    setIsSubmitting(true);
    setError('');

    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i API
      const bookingPayload = {
        // Th√¥ng tin kh√°ch h√†ng
        hoTen: bookingData.hoTen,
        soDienThoai: bookingData.soDienThoai,
        email: bookingData.email,
        soCccd: '', // Kh√°ch v√£ng lai c√≥ th·ªÉ kh√¥ng c√≥ CCCD

        // Th√¥ng tin ƒë·∫∑t ph√≤ng
        maPhong: bookingData.roomData.maPhong,
        ngayNhanPhong: bookingData.ngayNhanPhong,
        ngayTraPhong: bookingData.ngayTraPhong,
        thoiGianDen: bookingData.thoiGianDen || '14:00',
        soNguoiLon: bookingData.soNguoiLon,
        soTreEm: bookingData.soTreEm,
        
        // Th√¥ng tin thanh to√°n
        phuongThucThanhToan: paymentData.phuongThucThanhToan,
        loaiThe: paymentData.loaiThe,
        tenNganHang: paymentData.tenNganHang,
        
        // Ghi ch√∫
        ghiChu: bookingData.ghiChu,
        ghiChuThanhToan: paymentData.ghiChuThanhToan,
        
        // T·ªïng ti·ªÅn
        tongTien: calculateTotalPrice(),
        
        // ƒê√°nh d·∫•u l√† kh√°ch v√£ng lai
        isGuestBooking: true,
      };

      console.log('G·ª≠i y√™u c·∫ßu ƒë·∫∑t ph√≤ng cho kh√°ch v√£ng lai:', bookingPayload);

      // G·ªçi API t·∫°o booking t·∫°m cho kh√°ch v√£ng lai v·ªõi OTP (public)
      const formData = new FormData();
      Object.entries(bookingPayload).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          formData.append(key, value as any);
        }
      });

      const response = await fetch(`${API_BASE_URL}/DatPhong/GuestPending`, {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        },
        credentials: 'omit'
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('API y√™u c·∫ßu x√°c th·ª±c. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.');
        }

        const errorData = await response.text();
        throw new Error(errorData || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t ph√≤ng');
      }

      const result = await response.json();
      console.log('K·∫øt qu·∫£ t·∫°o booking t·∫°m:', result);

      // L∆∞u th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ hi·ªÉn th·ªã ·ªü trang confirm
      localStorage.setItem('pendingGuestBookingId', result.bookingId);
      localStorage.setItem('guestName', bookingData.hoTen);
      localStorage.setItem('guestEmail', bookingData.email);
      localStorage.setItem('guestPhone', bookingData.soDienThoai);
      localStorage.setItem('roomName', bookingData.roomData.tenPhong);
      localStorage.setItem('roomType', bookingData.roomData.tenLoaiPhong);
      localStorage.setItem('roomThumbnail', bookingData.roomData.thumbnail || '/images/rooms/room1.jpg');
      localStorage.setItem('checkInDate', bookingData.ngayNhanPhong);
      localStorage.setItem('checkOutDate', bookingData.ngayTraPhong);
      localStorage.setItem('adultCount', bookingData.soNguoiLon.toString());
      localStorage.setItem('childCount', bookingData.soTreEm.toString());
      localStorage.setItem('totalPrice', calculateTotalPrice().toString());
      localStorage.setItem('paymentMethod', paymentData.phuongThucThanhToan);

      // Chuy·ªÉn ƒë·∫øn trang x√°c nh·∫≠n OTP
      router.push('/guest-booking/confirm');

    } catch (error) {
      console.error('L·ªói khi ƒë·∫∑t ph√≤ng:', error);
      setError(error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleBackToEdit = () => {
    router.back();
  };

  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.spinner}></div>
        <p>ƒêang t·∫£i...</p>
      </div>
    );
  }

  if (!bookingData || !paymentData) {
    return (
      <div className={styles.errorContainer}>
        <h2>Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng</h2>
        <p>Vui l√≤ng quay l·∫°i v√† ƒëi·ªÅn th√¥ng tin ƒë·∫∑t ph√≤ng.</p>
        <button onClick={() => router.push('/users/rooms')} className={styles.backButton}>
          Quay l·∫°i danh s√°ch ph√≤ng
        </button>
      </div>
    );
  }

  return (
    <div className={styles.pageContainer}>
      <Header />
      
      <main className={styles.mainContent}>
        <div className={styles.container}>
          <div className={styles.breadcrumb}>
            <span onClick={() => router.push('/users/rooms')} className={styles.breadcrumbLink}>
              Danh s√°ch ph√≤ng
            </span>
            <span className={styles.breadcrumbSeparator}>/</span>
            <span onClick={handleBackToEdit} className={styles.breadcrumbLink}>
              Th√¥ng tin ƒë·∫∑t ph√≤ng
            </span>
            <span className={styles.breadcrumbSeparator}>/</span>
            <span className={styles.breadcrumbCurrent}>X√°c nh·∫≠n thanh to√°n</span>
          </div>

          <h1 className={styles.pageTitle}>X√°c nh·∫≠n thanh to√°n</h1>

          <div className={styles.contentGrid}>
            {/* T√≥m t·∫Øt ƒë·∫∑t ph√≤ng */}
            <div className={styles.bookingSummary}>
              <h2>Th√¥ng tin ƒë·∫∑t ph√≤ng</h2>
              <div className={styles.roomCard}>
                <div className={styles.roomImage}>
                  <Image
                    src={bookingData.roomData.thumbnail || '/images/room-placeholder.jpg'}
                    alt={bookingData.roomData.tenPhong}
                    width={300}
                    height={200}
                    className={styles.image}
                  />
                </div>
                <div className={styles.roomDetails}>
                  <h3>{bookingData.roomData.tenPhong}</h3>
                  <p className={styles.roomType}>{bookingData.roomData.tenLoaiPhong}</p>
                </div>
              </div>

              <div className={styles.customerInfo}>
                <h3>Th√¥ng tin kh√°ch h√†ng</h3>
                <div className={styles.infoItem}>
                  <span>H·ªç t√™n:</span>
                  <span>{bookingData.hoTen}</span>
                </div>
                <div className={styles.infoItem}>
                  <span>ƒêi·ªán tho·∫°i:</span>
                  <span>{bookingData.soDienThoai}</span>
                </div>
                <div className={styles.infoItem}>
                  <span>Email:</span>
                  <span>{bookingData.email}</span>
                </div>
              </div>

              <div className={styles.bookingDetails}>
                <h3>Chi ti·∫øt ƒë·∫∑t ph√≤ng</h3>
                <div className={styles.infoItem}>
                  <span>Ng√†y nh·∫≠n:</span>
                  <span>{new Date(bookingData.ngayNhanPhong).toLocaleDateString('vi-VN')}</span>
                </div>
                <div className={styles.infoItem}>
                  <span>Ng√†y tr·∫£:</span>
                  <span>{new Date(bookingData.ngayTraPhong).toLocaleDateString('vi-VN')}</span>
                </div>
                <div className={styles.infoItem}>
                  <span>Th·ªùi gian ƒë·∫øn:</span>
                  <span>{bookingData.thoiGianDen || '14:00'}</span>
                </div>
                <div className={styles.infoItem}>
                  <span>S·ªë ƒë√™m:</span>
                  <span>{calculateNights()} ƒë√™m</span>
                </div>
                <div className={styles.infoItem}>
                  <span>S·ªë kh√°ch:</span>
                  <span>{bookingData.soNguoiLon + bookingData.soTreEm} ng∆∞·ªùi</span>
                </div>
              </div>

              {/* Hi·ªÉn th·ªã ph∆∞∆°ng th·ª©c thanh to√°n ƒë√£ ch·ªçn */}
              <div className={styles.paymentInfo}>
                <h3>Ph∆∞∆°ng th·ª©c thanh to√°n</h3>
                <div className={styles.paymentMethodSelected}>
                  <span className={styles.paymentIcon}>
                    {getPaymentMethodText(paymentData.phuongThucThanhToan)}
                  </span>
                  {paymentData.loaiThe && (
                    <div className={styles.paymentDetail}>
                      <span>Lo·∫°i th·∫ª: {paymentData.loaiThe.toUpperCase()}</span>
                    </div>
                  )}
                  {paymentData.tenNganHang && (
                    <div className={styles.paymentDetail}>
                      <span>Ng√¢n h√†ng: {paymentData.tenNganHang}</span>
                    </div>
                  )}
                </div>
              </div>

              <div className={styles.priceBreakdown}>
                <h3>Chi ti·∫øt gi√°</h3>
                <div className={styles.infoItem}>
                  <span>Ph√≤ng ({calculateNights()} ƒë√™m):</span>
                  <span>{(calculateNights() * (bookingData.roomData.giaMoiDem || 0)).toLocaleString()}ƒë</span>
                </div>

                <div className={styles.totalPrice}>
                  <span>T·ªïng c·ªông:</span>
                  <span className={styles.price}>
                    {calculateTotalPrice().toLocaleString()}ƒë
                  </span>
                </div>
              </div>
            </div>

            {/* Form x√°c nh·∫≠n thanh to√°n */}
            <div className={styles.confirmationForm}>
              <h2>X√°c nh·∫≠n thanh to√°n</h2>

              {error && (
                <div className={styles.errorMessage}>
                  {error}
                </div>
              )}

              <div className={styles.confirmationSummary}>
                <div className={styles.summarySection}>
                  <h3>üìã T√≥m t·∫Øt ƒë·∫∑t ph√≤ng</h3>
                  <div className={styles.summaryGrid}>
                    <div className={styles.summaryItem}>
                      <span>Kh√°ch h√†ng:</span>
                      <span>{bookingData.hoTen}</span>
                    </div>
                    <div className={styles.summaryItem}>
                      <span>Ph√≤ng:</span>
                      <span>{bookingData.roomData.tenPhong} ({bookingData.roomData.tenLoaiPhong})</span>
                    </div>
                    <div className={styles.summaryItem}>
                      <span>Th·ªùi gian:</span>
                      <span>
                        {new Date(bookingData.ngayNhanPhong).toLocaleDateString('vi-VN')} - {' '}
                        {new Date(bookingData.ngayTraPhong).toLocaleDateString('vi-VN')} ({calculateNights()} ƒë√™m)
                      </span>
                    </div>
                    <div className={styles.summaryItem}>
                      <span>Thanh to√°n:</span>
                      <span>{getPaymentMethodText(paymentData.phuongThucThanhToan)}</span>
                    </div>
                    <div className={styles.summaryItem}>
                      <span>T·ªïng ti·ªÅn:</span>
                      <span className={styles.totalAmount}>
                        {calculateTotalPrice().toLocaleString()}ƒë
                      </span>
                    </div>
                  </div>
                </div>

                {/* ƒêi·ªÅu kho·∫£n */}
                <div className={styles.termsSection}>
                  <div className={styles.termsBox}>
                    <FaShieldAlt className={styles.securityIcon} />
                    <div className={styles.termsContent}>
                      <h4>ƒêi·ªÅu kho·∫£n ƒë·∫∑t ph√≤ng</h4>
                      <ul>
                        <li>Th√¥ng tin ƒë·∫∑t ph√≤ng s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n qua email v√† SMS</li>
                        <li>Vui l√≤ng mang theo CCCD/Passport khi check-in</li>
                        <li>Check-in: 14:00 | Check-out: 12:00</li>
                        <li>H·ªßy ph√≤ng mi·ªÖn ph√≠ tr∆∞·ªõc 24h</li>
                        {paymentData.phuongThucThanhToan === 'cash' && (
                          <li>Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t t·∫°i qu·∫ßy l·ªÖ t√¢n khi nh·∫≠n ph√≤ng</li>
                        )}
                      </ul>
                    </div>
                  </div>
                </div>
              </div>

              <div className={styles.formActions}>
                <button
                  type="button"
                  onClick={handleBackToEdit}
                  className={styles.backButton}
                  disabled={isSubmitting}
                >
                  <FaArrowLeft />
                  Quay l·∫°i ch·ªânh s·ª≠a
                </button>
                <button
                  type="button"
                  onClick={handleConfirmPayment}
                  className={styles.submitButton}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <>
                      <div className={styles.buttonSpinner}></div>
                      ƒêang x·ª≠ l√Ω...
                    </>
                  ) : (
                    <>
                      <FaCheckCircle />
                      X√°c nh·∫≠n v√† ti·∫øp t·ª•c
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
}
